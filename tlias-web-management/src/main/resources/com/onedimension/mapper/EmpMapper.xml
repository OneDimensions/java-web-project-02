<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 复杂的sql建议使用xml -->
<!-- namespace: 指定包名 -->
<mapper namespace="com.onedimension.mapper.EmpMapper">
    <!-- id: 方法名 resultType: 查询语句返回记录单条的类型 -->
    <!-- 使用pagehelper完成分页查询, 不需要指定limit -->
    <!-- concat 拼接字符串函数 -->
    <!-- if 动态sql -->
    <!-- where会根据条件自动去除条件前多余的and or -->
    <select id="page" resultType="com.onedimension.pojo.Emp">
        select e.*, d.name as deptName
        from emp e
        left join dept d
        on e.dept_id = d.id
        <where>
            <if test="name != null and name != ''">
                e.name like concat('%', #{name}, '%')
            </if>
            <if test="gender != null">
                and e.gender = #{gender}
            </if>
            <if test="begin != null and end != null">
                and e.entry_date between #{begin} and #{end}
            </if>
            <if test="deptId != null">
                and e.dept_id = #{deptId}
            </if>
        </where>
        order by e.update_time desc
    </select>

    <insert id="saveEmp" useGeneratedKeys="true" keyProperty="id">
        insert into emp(name, username, gender, phone, job, salary, dept_id, image, entry_date, create_time,
                        update_time)
        values (#{name}, #{username}, #{gender}, #{phone}, #{job}, #{salary}, #{deptId}, #{image}, #{entryDate},
                #{createTime}, #{updateTime})
    </insert>

    <delete id="deleteEmpById">
        delete from emp where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>


    <select id="getEmpById" resultType="com.onedimension.pojo.Emp">
        select e.*, d.name as deptName
        from emp e
                 left join dept d
                           on e.dept_id = d.id
        where e.id = #{id}
    </select>


    <!-- 手动数据映射  id: 绑定sql查询结果  type: 封装的实体类 -->
    <resultMap id="empResultMap" type="com.onedimension.pojo.Emp">
        <!-- column: 查询的字段名 property: 封装的实体类属性 -->
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="username" property="username"/>
        <result column="gender" property="gender"/>
        <result column="phone" property="phone"/>
        <result column="job" property="job"/>
        <result column="salary" property="salary"/>
        <result column="image" property="image"/>
        <result column="entry_date" property="entryDate"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="dept_id" property="deptId"/>

        <!-- 封装集合 property: 封装的实体类属性, ofType: 集合元素的类型 -->
        <collection property="exprList" ofType="com.onedimension.pojo.EmpExpr">
            <id column="ee_id" property="id"/>
            <result column="ee_emp_id" property="empId"/>
            <result column="ee_job" property="job"/>
            <result column="ee_begin" property="begin"/>
            <result column="ee_end" property="end"/>
            <result column="ee_company" property="company"/>
        </collection>

    </resultMap>

    <!-- 如果查询的数据复杂, 或者返回的字段名和实体类名不一致, 可以使用resultMap来指定数据映射 -->
    <select id="getEmpByIdV2" resultMap="empResultMap">
        select e.*,
               ee.id      ee_id,
               ee.emp_id  ee_emp_id,
               ee.job     ee_job,
               ee.begin   ee_begin,
               ee.end     ee_end,
               ee.company ee_company
        from emp e
                 left join emp_expr ee on e.id = ee.emp_id
        where e.id = #{id}
    </select>

    <!-- 根据id更新员工信息 -->
    <!-- set标签: 会自动生成set语句, 并取出多余的, -->
    <update id="updateEmpById">
        update emp
        <set>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="username != null and username != ''">
                username = #{username},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="job != null and job != ''">
                job = #{job},
            </if>
            <if test="salary != null">
                salary = #{salary},
            </if>
            <if test="image != null and image != ''">
                image = #{image},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            <if test="entryDate != null">
                entry_date = #{entryDate},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="countEmpJobData" resultType="java.util.Map">
        select count(*) as num,
               case job
                   when 1 then '班主任'
                   when 2 then '讲师'
                   when 3 then '学工主管'
                   when 4 then '教研主管'
                   when 5 then '咨询师'
                   else '其他' end
                        as pos
        from emp
        group by emp.job;
    </select>


    <!-- if(表达式, true结果 : false结果) -->
    <select id="getEmpGenderData" resultType="java.util.Map">
        select count(8) as value,
               if(gender = 1, '男性员工', '女性员工')
                        as name
        from emp
        group by gender;
    </select>

    <select id="countStudentDegreeData" resultType="java.util.Map">
        select count(*) as value,
               case degree
                   when 1 then '初中'
                   when 2 then '高中'
                   when 3 then '大专'
                   when 4 then '本科'
                   when 5 then '硕士'
                   when 6 then '博士' end
                        as name
        from student
        group by degree
        order by value desc;
    </select>


    <select id="countStudentData" resultType="java.util.Map">
        select count(*) num, c.name className
        from student s
                 left join clazz c on c.id = s.clazz_id
        group by s.clazz_id;
    </select>


</mapper>